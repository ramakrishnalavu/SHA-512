from cryptography.hazmat.primitives.asymmetric import dh
from Crypto.Cipher import AES
from Crypto.Util.Padding import pad, unpad
import hashlib, os

def generate_dh_keys():
    parameters = dh.generate_parameters(generator=2, key_size=2048)
    private_key = parameters.generate_private_key()
    public_key = private_key.public_key()
    return private_key, public_key, parameters

def compute_shared_key(private_key, peer_public_key):
    return private_key.exchange(peer_public_key)[:32]

def compute_hash(message):
    return hashlib.sha256(message.encode()).hexdigest()

def encrypt_message(message, key):
    iv = os.urandom(16)
    cipher = AES.new(key, AES.MODE_CBC, iv)
    message_with_hash = message + compute_hash(message)
    ciphertext = cipher.encrypt(pad(message_with_hash.encode(), AES.block_size))
    return iv, ciphertext

def decrypt_message(iv, ciphertext, key):
    cipher = AES.new(key, AES.MODE_CBC, iv)
    decrypted_padded_message = cipher.decrypt(ciphertext)
    decrypted_message = unpad(decrypted_padded_message, AES.block_size).decode()
    received_message, received_hash = decrypted_message[:-64], decrypted_message[-64:]
    if compute_hash(received_message) == received_hash:
        print("\n✅ Integrity Verified! Message is authentic.")
    else:
        print("\n❌ Integrity Check Failed! Message is tampered.")
    return received_message

private_key_A, public_key_A, parameters = generate_dh_keys()
private_key_B, public_key_B, _ = generate_dh_keys()
shared_key_A = compute_shared_key(private_key_A, public_key_B)
shared_key_B = compute_shared_key(private_key_B, public_key_A)
assert shared_key_A == shared_key_B
aes_key = shared_key_A
message = input("🔹 Enter message to send: ")
iv, encrypted_message = encrypt_message(message, aes_key)
print(f"\n🔐 Encrypted Message (Ciphertext): {encrypted_message.hex()}")
decrypted_message = decrypt_message(iv, encrypted_message, aes_key)
print(f"\n📩 Original Message: {message}")
print(f"📥 Decrypted Message: {decrypted_message}")
